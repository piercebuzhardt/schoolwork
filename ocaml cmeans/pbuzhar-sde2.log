Pierce Buzhardt

SDE2 LOG FILE

# #use "inputs.caml";;
	*all of its information*
# #use "cmean.caml"
  *all of its information*

	
# distanceR2([6.;9.;2.],[555.;-230.;23.]);;
- : float = 358963.
# distanceR2([98.;987.;876.;765.;654.;543.;432.;321.],[123.;234.;345.;456.;567.;- : float = 1422080.


# distanceSqAllMeans([47.698;62.48],h);;
- : float list =
[4.00000000822365105e-12; 20127.571058790003; 1097.1155289999997;
 24526.9288764879966; 95.2322689700009448; 22472.373279066;
 332.927268999999967; 17537.1875227860073; 566.071017344000893;
 27952.7884952579952; 121.348131456003955; 22833.0873037539968;
 697.363844868000797; 26129.9500087619963; 364.57911722600079;
 21517.2396261360045; 455.475307040001894; 20042.7786188280079;
 474.150810726000827; 23424.9782241260036; 133.408405450010122;
 24767.2132815419973; 295.287112810000849; 17291.351645; 259.788879060000852;
 18793.429102336002; 388.33024409600182; 27343.071914; 254.502697866000858;
 22664.7082533920038; 774.658622682001578; 23721.4936169400025;...]
 
# distanceSqAllMeans([47.698;62.48],[[1.23;4.32];[76.8;999.54];[13.;42.]]);;
- : float list = [5541.860624; 878928.370003999909; 1623.3816039999997]


# listMinPos(h);;
- : int = 181
# listMinPos([1.;2.;3.;4.;5.;6.;7.;8.;9.;0.1;0.2;0.3;0.4;0.5;0.6;0.7]);;
- : int = 9

(*just used these to make things easier on myself *)
# let h2 =[3.;4.;7.;2.];;
val h2 : float list = [3.; 4.; 7.; 2.]
# let h1 =[9.;12.;33.;5.];;
val h1 : float list = [9.; 12.; 33.; 5.]


# elsum(h1,h2);;
- : float list = [12.; 16.; 40.; 7.]
# elsum([5.6;6.5],[7.7;33.]);;
- : float list = [13.3; 39.5]


# scaleList(h1,6);;
- : float list = [1.5; 2.; 5.5; 0.83333333333333337]
# scaleList(h2,10);;
- : float list = [0.3; 0.4; 0.7; 0.2]


# zeroes(3);;
- : float list = [0.; 0.; 0.]
# zeroes(7);;
- : float list = [0.; 0.; 0.; 0.; 0.; 0.; 0.]

# zeroMeansSet(3,7);;
- : float list list =
[[0.; 0.; 0.; 0.; 0.; 0.; 0.]; [0.; 0.; 0.; 0.; 0.; 0.; 0.];
 [0.; 0.; 0.; 0.; 0.; 0.; 0.]]
# zeroMeansSet(3,1);;
- : float list list = [[0.]; [0.]; [0.]]


# zeroVdiff(h1,h2);;
- : bool = false
# zeroVdiff(h1,h1);;
- : bool = true


# zeroSetDiff([[2.;3.];[4.;4.]],[[2.;3.];[4.;4.]]);;
- : bool = true
# zeroSetDiff([[2.;3.];[4.;4.]],[[2.;3.];[4.;2.]]);;
- : bool = false


# zeroCounts(5);;
- : int list = [0; 0; 0; 0; 0]
# zeroCounts(35);;
- : int list =
[0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0;
 0; 0; 0; 0; 0; 0; 0; 0; 0; 0]

 
# updateCounts(2, zeroCounts(9));;
- : int list = [0; 0; 1; 0; 0; 0; 0; 0; 0]
# updateCounts(4,updateCounts(2, zeroCounts(9)));;
- : int list = [0; 0; 1; 0; 1; 0; 0; 0; 0]


# updateMeansSum(h1,1,zeroMeansSet(5,4));;
- : float list list =
[[0.; 0.; 0.; 0.]; [9.; 12.; 33.; 5.]; [0.; 0.; 0.; 0.]; [0.; 0.; 0.; 0.];
 [0.; 0.; 0.; 0.]]
# updateMeansSum(h2,0,updateMeansSum(h1,1,zeroMeansSet(5,4)));;
- : float list list =
[[3.; 4.; 7.; 2.]; [9.; 12.; 33.; 5.]; [0.; 0.; 0.; 0.]; [0.; 0.; 0.; 0.];
 [0.; 0.; 0.; 0.]]

 
# formNewMeans([[543.];[12.];[64.];[7.]],[2;3;4;5]);;
- : float list list = [[271.5]; [4.]; [16.]; [1.4]]
# formNewMeans([[543.];[12.];[64.];[7.]],[77;0;1;1]);;
- : float list list = [[7.05194805194805152]; [12.]; [64.]; [7.]]


# let muzero =[[36.439;23.435];[65.432;76.50]];;
val muzero : float list list = [[36.439; 23.435]; [65.432; 76.5]]
# let mu1 =reclassify(h, muzero, zeroMeansSet(2,2),zeroCounts(2));;
val mu1 : float list list =
  [[-15.8991336815286584; -17.7434140700636895];
   [52.1854884883720942; 56.8740696046511687]]
# let mu2 =reclassify(h, mu1, zeroMeansSet(2,2),zeroCounts(2));;
val mu2 : float list list =
  [[-51.10444003; -52.52021005]; [48.5825602000000174; 49.1188998900000087]]
# let mu3 =reclassify(h, mu2, zeroMeansSet(2,2),zeroCounts(2));;
val mu3 : float list list =
  [[-51.10444003; -52.52021005]; [48.5825602000000174; 49.1188998900000087]]
	

	CMEANS
	
# cmeans(2,h,muzero);;
- : float list list =
[[-51.10444003; -52.52021005]; [48.5825602000000174; 49.1188998900000087]]

# cmeans(2,h,mu1);;
- : float list list =
[[-51.10444003; -52.52021005]; [48.5825602000000174; 49.1188998900000087]]

# cmeans(2,h,[[49.;39.];[50.;54.]]);;
- : float list list =
[[-51.10444003; -52.52021005]; [48.5825602000000174; 49.1188998900000087]]

# #use "inputVectors2.caml";;
val vset2 : float list list =
  [[57.415001; 55.627998]; [-33.544998; -45.639]; [40.626999; 53.868999];
   [-51.181; -56.695999]; [36.652; 53.931999]; [-38.917; -61.306];
   [55.441002; 59.639999]; [-55.047001; -73.101997]; [56.948002; 52.292];
   [-44.09; -38.841999]; [47.611; 45.346001]; [-47.030998; -47.085999];
   [50.458; 42.327999]; [-51.188999; -61.173]; [59.209; 48.331001];
   [-31.799; -58.485001]; [69.433998; 29.309]; [-58.278999; -51.733002];
   [66.136002; 37.346001]; [-46.099998; -24.804001]; [58.602001; 53.763];
   [-43.550999; -53.942001]; [37.234001; 46.862]; [-31.649; -71.246002];
   [54.852001; 48.271]; [-32.474998; -45.150002]; [45.008999; 76.510002];
   [-60.078999; -41.457001]; [45.808998; 56.064999];
   [-67.502998; -62.200001]; [58.226002; 67.435997];
   [-65.822998; -41.591999]; [37.778; 39.993999]; [-80.146004; -69.245003];
   [56.123001; 60.332001]; [-36.667999; -55.500999]; [62.888; 42.308998];
   [-59.365002; -54.854]; [48.405998; 51.368999]; [-52.683998; -55.001999];
   [59.405998; 44.292]; [-54.785; -35.436001]; [58.342999; 52.327];
   [-50.015999; -55.605999]; [63.985001; 55.748001];
   [-72.577003; -44.567001]; [52.241001; 61.027]; [-46.347; -63.224998];
   [51.985001; 42.730999]; [-55.168999; -54.196999]; [42.534; 41.365002];
   [-48.049999; -42.537998]; [42.436001; 45.306999]; [-58.604; -49.966];
   [44.369999; 29.504999]; [-54.278999; -48.724998]; [49.571999; 36.717999];
   [-47.076; -45.155998]; [62.719002; 76.413002]; [-55.474998; -42.466999];
   [53.794998; 45.323002]; [-47.678001; -43.624001]; [41.554001; 42.245998];
   [-46.464001; -62.117001]; [61.408001; 44.358002]; [-50.167; -52.709999];
   [36.665001; 36.702999]; [-58.537998; -50.826]; [48.866001; 61.666];
   [-51.842999; -38.695999]; [52.214001; 65.928001];
   [-45.880001; -42.706001]; [50.077; 57.028]; [-40.355; -44.445999];
   [40.796001; 40.095001]; [-59.188; -40.474998]; [46.356998; 37.419998];
   [-39.362999; -55.049]; [57.736; 69.579002]; [-44.056; -58.951];
   [48.907001; 37.827]; [-55.932999; -51.294998]; [40.303001; 55.118];
   [-59.976002; -34.715]; [41.105; 45.528]; [-51.560001; -51.320999];
   [55.479; 47.98]; [-24.08; -71.802002]; [47.221001; 52.074001];
   [-42.977001; -48.509998]; [63.467999; 57.388]; [-60.029999; -14.814];
   [38.102001; 45.949001]; [-47.402; -50.949001]; [47.681999; 52.648998];
   [-59.631001; -35.384998]; [48.504002; 33.852001]; [-53.819; -42.988998];
   [52.645; 58.112]; [-26.32; ...]; ...]
# cmeans(2,vset2,muzero);;
- : float list list =
[[-50.6787099199999815; -51.6003100600000195];
 [50.8551899300000088; 50.86648994]]
# cmeans(4,h,[[12.;54.];[57.;45.];[43.;34.];[23.;33.]]);;
- : float list list =
[[40.7998215357142868; 60.1884637500000181];
 [57.7382440487804942; 48.2230731707317];
 [43.5030003548387043; 40.3053872258064558]; [-51.10444003; -52.52021005]]
